---
- name: install catalyst rails application
  hosts: catalyst

  pre_tasks:
  - name: install required packages
    package:
      name: "{{ item }}"
      state: present
    become: true
    with_items:
      - http-parser
      - 'nodejs'
      - "@Development tools"
      - mysql-devel

  - name: include apache role to get its handlers
    include_role:
      name: apache
      tasks_from: dolittle


  - name: configure application user
    include_tasks: configure_app_user.yml

  - name: make sure deploy dir exists
    file:
      path: "{{ deploy_dir }}"
      owner: "{{ login_user }}"
      state: directory
      recurse: true
    become: true

  - name: get application from repo
    git:
      repo: "{{ app_repo }}"
      dest: "{{ deploy_dir }}"
      version: "{{ app_branch | default('HEAD') }}"
      key_file: "{{ catalyst_deploy_key_full_path }}"
      ssh_opts: "-o StrictHostKeyChecking=no"

  - name: configure bundle install based on mode
    set_fact:
      deployment_mode: false
  - set_fact:
      deployment_mode: true
    when: mode == "deploy"

  # NOTE: don't install spring in production environments:
  # https://github.com/projecthydra/hydra-head/issues/201
  - name: adjust for the rails environment
    set_fact:
      exclude: "development, test"
    when: rails_env == 'production'

  - name: install bundler
    shell:
      chdir: "{{ deploy_dir }}"
      cmd: "gem install bundler -v {{ bundler_version }}"

  - name: install gems with bundler
    bundler:
      state: present
      gemfile: "{{ deploy_dir }}/Gemfile"
      exclude_groups:
        - development
        - test
      deployment_mode: yes
      gem_path: "{{deploy_dir}}/vendor/bundle"


  - name: generate rails secret_key_base
    # TODO: use or lose
    # command: bash -lc "bundle exec rake secret"
    command: "openssl rand -hex 64"
    register: secret_key_base_result
    no_log: "{{ not debugging }}"

  - name: set secret_key_base
    set_fact:
      secret_key_base: "{{ secret_key_base_result.stdout }}"

  - name: Configure environment variables
    no_log: "{{ not debugging }}"
    template:
      src:  "templates/dotenv.j2"
      dest:  "{{ deploy_dir }}/.env"
    notify: restart apache

  - name: insert catalyst configs into virtualhost config
    blockinfile:
      block:  "{{ lookup('template', 'templates/catalyst_virtualhost.j2') }}"
      dest: "{{ apache_config_file }}"
      marker: "# {mark} catalyst configs"
      insertbefore: "</VirtualHost>"
    notify: restart apache
    become: true

  - name: override default http redirect in virtualhost config
    blockinfile:
      block:  "{{ lookup('template', 'templates/http_redirect.j2') }}"
      dest: "{{ apache_config_file }}"
      marker: "# {mark} {{ apache_http_redirect_marker }}"
      insertafter: "<VirtualHost *:80>"
    notify: restart apache
    become: true



  # NOTE: example
  # - name: override default http logging in virtualhost config
  #   blockinfile:
  #     block:  "{{ lookup('template', 'templates/http_log.j2') }}"
  #     dest: "{{ apache_config_file }}"
  #     marker: "# {mark} {{ apache_http_logging_marker }}"
  #     insertafter: "<VirtualHost *:80>"
  #   notify: restart apache
  #   become: true

  # NOTE: example
  # - name: override default https logging in virtualhost config
  #   blockinfile:
  #     block:  "{{ lookup('template', 'templates/https_log.j2') }}"
  #     dest: "{{ apache_config_file }}"
  #     marker: "# {mark} {{ apache_https_logging_marker }}"
  #     insertbefore: "</VirtualHost>"
  #   notify: restart apache
  #   become: true

  # NOTE: example
  # - name: override default ssl config in virtualhost config
  #   blockinfile:
  #     block:  "{{ lookup('template', 'templates/ssl_config.j2') }}"
  #     dest: "{{ apache_config_file }}"
  #     marker: "# {mark} {{ apache_ssl_config_marker }}"
  #     insertbefore: "</VirtualHost>"
  #   notify: restart apache
  #   become: true

  # NOTE: example
  # - name: override default header modification in virtualhost config
  #   blockinfile:
  #     block:  "{{ lookup('template', 'templates/header_mod.j2') }}"
  #     dest: "{{ apache_config_file }}"
  #     marker: "# {mark} {{ apache_header_mod_marker }}"
  #     insertbefore: "</VirtualHost>"
  #   notify: restart apache
  #   become: true

  - name: install yarn
    shell:
      cmd: npm install yarn -g
    become: true

  - name: install yarn packages
    shell:
      chdir: "{{ deploy_dir }}"
      cmd: "yarn install"

  # TODO: update to rails command upon updating rails version
  - name: precompile assets
    command: bash -lc "RAILS_ENV={{ rails_env }} bundle exec rake assets:precompile"
    args:
      chdir: "{{ deploy_dir }}"
    when: rails_env == "production"

  - name: set ownership of deploy dir and contents
    file:
      path: "{{ deploy_dir }}"
      owner: "{{ app_user }}"
      group: "{{ app_group }}"
      state: directory
      recurse: true
    become: true
    notify: restart apache
    when: mode == "deploy"
